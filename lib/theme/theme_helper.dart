import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(7.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(2.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray10001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Lexend',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.6),
          fontSize: 15.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900.withOpacity(0.53),
          fontSize: 10.fSize,
          fontFamily: 'Lexend',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 44.fSize,
          fontFamily: 'Titillium Web',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.64),
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary.withOpacity(0.64),
          fontSize: 24.fSize,
          fontFamily: 'Titillium Web',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Lexend',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900.withOpacity(0.49),
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 9.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.56),
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900.withOpacity(0.64),
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7D44F5),
    primaryContainer: Color(0XF2FFFFFF),
    secondaryContainer: Color(0XFF555555),

    // Error colors
    onError: Color(0XFF797979),

    // On colors(text colors)
    onPrimary: Color(0XFF111111),
    onPrimaryContainer: Color(0XFFD80B0B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA700 => Color(0XFFFFA800);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFD7D4DE);
  Color get blueGray400 => Color(0XFF868686);
  Color get blueGray900 => Color(0XFF2D1654);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD7C5FF);
  Color get deepPurple40082 => Color(0X828460D5);
  Color get deepPurpleA100 => Color(0XFFB697FA);
  Color get deepPurpleA10001 => Color(0XFFAB78E9);
  Color get deepPurpleA200 => Color(0XFF8E54E9);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray10099 => Color(0X99F7F7F7);
  Color get gray200 => Color(0XFFECEBEE);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray20002 => Color(0XFFE8E6E9);
  Color get gray20003 => Color(0XFFE8E6E8);
  Color get gray300 => Color(0XFFDFDFDF);
  Color get gray30001 => Color(0XFFE2E2E2);
  Color get gray30002 => Color(0XFFE5E2EB);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFC1C1CF);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFFA0A0A0);
  Color get gray50001 => Color(0XFF929195);
  Color get gray50002 => Color(0XFF9E9E9E);
  Color get gray50003 => Color(0XFF999797);
  Color get gray50004 => Color(0XFF979797);
  Color get gray50005 => Color(0XFFACAAAF);
  Color get gray5001 => Color(0XFFFCF9F9);
  Color get gray5002 => Color(0XFFFBF2FF);
  Color get gray5003 => Color(0XFFF7F8FC);
  Color get gray700 => Color(0XFF696666);
  Color get gray900 => Color(0XFF222222);
  Color get gray90001 => Color(0XFF212427);
  Color get gray90002 => Color(0XFF282828);

  // Green
  Color get green400 => Color(0XFF65D072);
  Color get greenA700 => Color(0XFF0BE701);

  // Indigo
  Color get indigo300 => Color(0XFF7974DB);
  Color get indigo400 => Color(0XFF656CDA);
  Color get indigo900 => Color(0XFF3A175F);
  Color get indigoA20099 => Color(0X994776E6);
  Color get indigoA400 => Color(0XFF475CE6);

  // Purplee
  Color get purple4001e => Color(0X1EA555D0);

  // Purple
  Color get purpleA100 => Color(0XFFDC8DFD);
  Color get purpleA200 => Color(0XFFDF5CFF);

  // Red
  Color get red500 => Color(0XFFEB4335);
  Color get red600 => Color(0XFFD84435);
  Color get redA200 => Color(0XFFFF543E);
  Color get redA700 => Color(0XFFFF0606);

  // Yellow
  Color get yellow800 => Color(0XFFF79E1B);
  Color get yellowA400 => Color(0XFFFFE600);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
